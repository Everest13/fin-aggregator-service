// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/fin-aggregate-service/fin-aggregate-service.proto

package fin_aggregator_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FinAggregatorService_GetTransactions_FullMethodName       = "/fin_aggregator_service.FinAggregatorService/GetTransactions"
	FinAggregatorService_UpdateTransaction_FullMethodName     = "/fin_aggregator_service.FinAggregatorService/UpdateTransaction"
	FinAggregatorService_MonzoCallback_FullMethodName         = "/fin_aggregator_service.FinAggregatorService/MonzoCallback"
	FinAggregatorService_LoadMonzoTransactions_FullMethodName = "/fin_aggregator_service.FinAggregatorService/LoadMonzoTransactions"
	FinAggregatorService_GetMonzoAuthURL_FullMethodName       = "/fin_aggregator_service.FinAggregatorService/GetMonzoAuthURL"
	FinAggregatorService_UploadCSV_FullMethodName             = "/fin_aggregator_service.FinAggregatorService/UploadCSV"
	FinAggregatorService_ListBank_FullMethodName              = "/fin_aggregator_service.FinAggregatorService/ListBank"
	FinAggregatorService_ListUser_FullMethodName              = "/fin_aggregator_service.FinAggregatorService/ListUser"
	FinAggregatorService_ListCategory_FullMethodName          = "/fin_aggregator_service.FinAggregatorService/ListCategory"
	FinAggregatorService_ListTransactionType_FullMethodName   = "/fin_aggregator_service.FinAggregatorService/ListTransactionType"
)

// FinAggregatorServiceClient is the client API for FinAggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinAggregatorServiceClient interface {
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	MonzoCallback(ctx context.Context, in *MonzoCallbackRequest, opts ...grpc.CallOption) (*MonzoCallbackResponse, error)
	LoadMonzoTransactions(ctx context.Context, in *LoadMonzoTransactionsRequest, opts ...grpc.CallOption) (*LoadMonzoTransactionsResponse, error)
	GetMonzoAuthURL(ctx context.Context, in *GetMonzoAuthURLRequest, opts ...grpc.CallOption) (*GetMonzoAuthURLResponse, error)
	UploadCSV(ctx context.Context, in *UploadCSVRequest, opts ...grpc.CallOption) (*UploadCSVResponse, error)
	ListBank(ctx context.Context, in *ListBankRequest, opts ...grpc.CallOption) (*ListBankResponse, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error)
	ListTransactionType(ctx context.Context, in *ListTransactionTypeRequest, opts ...grpc.CallOption) (*ListTransactionTypeResponse, error)
}

type finAggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinAggregatorServiceClient(cc grpc.ClientConnInterface) FinAggregatorServiceClient {
	return &finAggregatorServiceClient{cc}
}

func (c *finAggregatorServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransactionResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) MonzoCallback(ctx context.Context, in *MonzoCallbackRequest, opts ...grpc.CallOption) (*MonzoCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonzoCallbackResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_MonzoCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) LoadMonzoTransactions(ctx context.Context, in *LoadMonzoTransactionsRequest, opts ...grpc.CallOption) (*LoadMonzoTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadMonzoTransactionsResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_LoadMonzoTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) GetMonzoAuthURL(ctx context.Context, in *GetMonzoAuthURLRequest, opts ...grpc.CallOption) (*GetMonzoAuthURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonzoAuthURLResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_GetMonzoAuthURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) UploadCSV(ctx context.Context, in *UploadCSVRequest, opts ...grpc.CallOption) (*UploadCSVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadCSVResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_UploadCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) ListBank(ctx context.Context, in *ListBankRequest, opts ...grpc.CallOption) (*ListBankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBankResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_ListBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoryResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_ListCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finAggregatorServiceClient) ListTransactionType(ctx context.Context, in *ListTransactionTypeRequest, opts ...grpc.CallOption) (*ListTransactionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionTypeResponse)
	err := c.cc.Invoke(ctx, FinAggregatorService_ListTransactionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinAggregatorServiceServer is the server API for FinAggregatorService service.
// All implementations must embed UnimplementedFinAggregatorServiceServer
// for forward compatibility.
type FinAggregatorServiceServer interface {
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error)
	MonzoCallback(context.Context, *MonzoCallbackRequest) (*MonzoCallbackResponse, error)
	LoadMonzoTransactions(context.Context, *LoadMonzoTransactionsRequest) (*LoadMonzoTransactionsResponse, error)
	GetMonzoAuthURL(context.Context, *GetMonzoAuthURLRequest) (*GetMonzoAuthURLResponse, error)
	UploadCSV(context.Context, *UploadCSVRequest) (*UploadCSVResponse, error)
	ListBank(context.Context, *ListBankRequest) (*ListBankResponse, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error)
	ListTransactionType(context.Context, *ListTransactionTypeRequest) (*ListTransactionTypeResponse, error)
	mustEmbedUnimplementedFinAggregatorServiceServer()
}

// UnimplementedFinAggregatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinAggregatorServiceServer struct{}

func (UnimplementedFinAggregatorServiceServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedFinAggregatorServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedFinAggregatorServiceServer) MonzoCallback(context.Context, *MonzoCallbackRequest) (*MonzoCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonzoCallback not implemented")
}
func (UnimplementedFinAggregatorServiceServer) LoadMonzoTransactions(context.Context, *LoadMonzoTransactionsRequest) (*LoadMonzoTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMonzoTransactions not implemented")
}
func (UnimplementedFinAggregatorServiceServer) GetMonzoAuthURL(context.Context, *GetMonzoAuthURLRequest) (*GetMonzoAuthURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonzoAuthURL not implemented")
}
func (UnimplementedFinAggregatorServiceServer) UploadCSV(context.Context, *UploadCSVRequest) (*UploadCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCSV not implemented")
}
func (UnimplementedFinAggregatorServiceServer) ListBank(context.Context, *ListBankRequest) (*ListBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBank not implemented")
}
func (UnimplementedFinAggregatorServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedFinAggregatorServiceServer) ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (UnimplementedFinAggregatorServiceServer) ListTransactionType(context.Context, *ListTransactionTypeRequest) (*ListTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionType not implemented")
}
func (UnimplementedFinAggregatorServiceServer) mustEmbedUnimplementedFinAggregatorServiceServer() {}
func (UnimplementedFinAggregatorServiceServer) testEmbeddedByValue()                              {}

// UnsafeFinAggregatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinAggregatorServiceServer will
// result in compilation errors.
type UnsafeFinAggregatorServiceServer interface {
	mustEmbedUnimplementedFinAggregatorServiceServer()
}

func RegisterFinAggregatorServiceServer(s grpc.ServiceRegistrar, srv FinAggregatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedFinAggregatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinAggregatorService_ServiceDesc, srv)
}

func _FinAggregatorService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_MonzoCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonzoCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).MonzoCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_MonzoCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).MonzoCallback(ctx, req.(*MonzoCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_LoadMonzoTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMonzoTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).LoadMonzoTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_LoadMonzoTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).LoadMonzoTransactions(ctx, req.(*LoadMonzoTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_GetMonzoAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonzoAuthURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).GetMonzoAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_GetMonzoAuthURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).GetMonzoAuthURL(ctx, req.(*GetMonzoAuthURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_UploadCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).UploadCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_UploadCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).UploadCSV(ctx, req.(*UploadCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_ListBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).ListBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_ListBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).ListBank(ctx, req.(*ListBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_ListCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).ListCategory(ctx, req.(*ListCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinAggregatorService_ListTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinAggregatorServiceServer).ListTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinAggregatorService_ListTransactionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinAggregatorServiceServer).ListTransactionType(ctx, req.(*ListTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinAggregatorService_ServiceDesc is the grpc.ServiceDesc for FinAggregatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinAggregatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fin_aggregator_service.FinAggregatorService",
	HandlerType: (*FinAggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactions",
			Handler:    _FinAggregatorService_GetTransactions_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _FinAggregatorService_UpdateTransaction_Handler,
		},
		{
			MethodName: "MonzoCallback",
			Handler:    _FinAggregatorService_MonzoCallback_Handler,
		},
		{
			MethodName: "LoadMonzoTransactions",
			Handler:    _FinAggregatorService_LoadMonzoTransactions_Handler,
		},
		{
			MethodName: "GetMonzoAuthURL",
			Handler:    _FinAggregatorService_GetMonzoAuthURL_Handler,
		},
		{
			MethodName: "UploadCSV",
			Handler:    _FinAggregatorService_UploadCSV_Handler,
		},
		{
			MethodName: "ListBank",
			Handler:    _FinAggregatorService_ListBank_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _FinAggregatorService_ListUser_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _FinAggregatorService_ListCategory_Handler,
		},
		{
			MethodName: "ListTransactionType",
			Handler:    _FinAggregatorService_ListTransactionType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/fin-aggregate-service/fin-aggregate-service.proto",
}
